#!/bin/sh

name="dev_boot"

lib_output_path="/lib/firmware"
persistent_output_path="/persistent"
script_path="/root"

source /etc/init.d/copy_from.sh

start() {
  # Get 'dev_boot' bootarg
  dev_boot=`cat /proc/device-tree/chosen/bootargs |
            sed -n -e 's/^.*dev_boot=\([^ ]*\).*/\1/p'`

  # Delete any firmware files that were already present in the rootfs.
  # In the dev configuration we want to obtain the firmware from the SD card or
  # network and this ensures if these files are not available from the SD card
  # or network we will error out rather than silently falling back to the
  # version present in the rootfs.
  if [ -n "$dev_boot" ]; then
    # If dev_boot is set to something (not null), then we are in the dev
    # configuration
    # DO NOT remove existing persistent settings configuration
    rm -f $lib_output_path/piksi_firmware.elf
    rm -f $lib_output_path/piksi_fpga.bit
  fi

  if [ "$dev_boot" == "sd" ]; then
    # Temporarily load driver and mount SD card
    modprobe sdhci_of_arasan
    sd_path="/media/mmcblk0p1"
    while ! grep -q $sd_path /proc/mounts; do
      echo "Waiting for SD card to mount..."
      sleep 1
    done

    copy_from_sd $sd_path "piksi_firmware.elf" $lib_output_path
    copy_from_sd $sd_path "piksi_fpga.bit" $lib_output_path
    # Overwrites settings if present on sd card.
    copy_from_sd $sd_path "config.ini" $persistent_output_path
    # Copy custom script if present on sd card.
    copy_from_sd $sd_path "init_script.sh" $script_path

    # Unload driver here so FPGA can be reconfigured, it wil be reloaded
    # by coldplug.
    umount $sd_path
    modprobe -r sdhci_of_arasan
  fi

  if [ "$dev_boot" == "net" ]; then
    # Get server ip from 'ip' bootarg
    server_ip=`cat /proc/device-tree/chosen/bootargs |
               sed -n -e 's/^.*ip=[^:]*:\([^:]*\).*/\1/p'`
    copy_from_net $server_ip "piksi_firmware.elf" $lib_output_path
    copy_from_net $server_ip "piksi_fpga.bit" $lib_output_path
    # Overwrite settings if present on network boot.
    copy_from_net $server_ip "config.ini" $persistent_output_path
    # Download custom script if present on network boot.
    copy_from_net $server_ip "init_script.sh" $script_path
    copy_from_net $server_ip "rootfs-overlay.tar" $script_path
  fi

  # Overlay rootfs if present
  if [ -f "$script_path/rootfs-overlay.tar" ]; then
    echo "Overlay rootfs"
    tar -x -v -f "$script_path/rootfs-overlay.tar" -C /
  fi

  # Run custom script if present
  if [ -f "$script_path/init_script.sh" ]; then
    echo "Running init_script.sh"
    SERVER_IP=$server_ip SD_PATH=$sd_path \
      sh "$script_path/init_script.sh"
  fi
}

stop() {
  :
}

source /etc/init.d/template_command.inc.sh
